.program clk6502
.side_set 1

  ;
  ; With a 6502 running at 2 MHz each period is 500 ns, for 250 ns per half-
  ; period (PHI2 low/high). With a 100 MHz PIO clock, we can fit 25 instructions
  ; into each PHI2 half-period, each instruction taking 10 ns excluding delays.
  ; We have space for 32 instructions.
  ;
  ; The side pin is used to generate the 2 MHz clock.
  ;
  ; Note the 74LVC245APW enable time of max 8.5 ns at 3.3V, or ~1 cycle,
  ; which we must honour.
  ;
  ; Upon a read request the Arm is given 190 ns to respond.
  ;
  ; L<nn> and H<nn> indicate where in the PHI2 L[ow] and H[igh] cycles we
  ; are, for <nn> in cycle # 00..24.
  ;

.wrap_target

  ;
  ; L00: Assume we'll be read from (1 cycle).
  ;
  set x, 1                      side 0              ; set R/W flag (1=R, 0=W)

  ;
  ; L01: Prepare for reading address A0-A15 (14 cycles).
  ;
  mov osr, null                 side 0              ; set OSR to 0x00000000
  out pindirs, 8                side 0              ; set GPIO0-7 to inputs
  set pins, 0b011               side 0 [11]         ; enable /OE1 for A0-A7

  ;
  ; L15: Address now stable, read A0-A15 into ISR (4 cycles).
  ;
  in pins, 8                    side 0              ; read A0-A7
  set pins, 0b101               side 0 [1]          ; enable /OE2 for A8-A15
  in pins, 8                    side 0              ; read A8-A15

  ;
  ; L19: Save A0-A15 in Y and check R/W pin (2 cycles).
  ;
  mov y, isr                    side 0              ; save A0-A15 in Y
  jmp pin, reading_from_us      side 0              ; check R/W line

writing_to_us:

  ;
  ; L21: Prepare for being written to (4 cycles).
  ;
  set x, 0                      side 0              ; set R/W to writing
  set pins, 0b110               side 0 [2]          ; enable /OE3 for D0-D7

  ;
  ; H00: Insert A0-A15 into ISR and wait (14 cycles).
  ;
  in y, 16                      side 1 [13]         ; insert A0-A15 in ISR

  ;
  ; H14: Earliest moment that D0-D7 contains byte to write (1 cycle).
  ;
  in pins, 8                    side 1              ; read D0-D7

  ;
  ; H15: Auto-push to RX FIFO (1 cycle).
  ;
  in x, 1                       side 1              ; include write-bit, push

  ;
  ; H16: Waste remainder of PHI2-high period (9 cycles).
  ;
  jmp L00                       side 1 [8]          ; move PHI2 low

reading_from_us:

  ;
  ; L21: Auto-push read request to RX FIFO (2 cycles).
  ;
  in null, 8                    side 0              ; insert dummy byte in ISR
  in x, 1                       side 0              ; include read-bit, push

  ;
  ; L23: Set GPIO0-7 to outputs and enable /OE3 (2 cycles).
  ;
  mov osr, ~ null               side 0              ; set OSR to 0x11111111
  out pindirs, 8                side 0              ; set GPIO0-7 to outputs

  ;
  ; H00: Wait to give Arm more time (17 cycles).
  ;
  set pins, 0b110               side 1              ; enable /OE3 for D0-D7
  nop                           side 1 [15]         ; wait

  ;
  ; H17: Read Arm's response and output D0-D7, then wait 60 ns (8 cycles).
  ;
  pull block                    side 1              ; fetch from FIFO TX
  out pins, 8                   side 1 [6]          ; write D0-D7, wait 60 ns

  ;
  ; L00: Time to move PHI2 down and wrap to L11 (10 cycles).
  ;
L00:
  nop                           side 0 [9]          ; waste 10 cycles

.wrap

% c-sdk {

static inline void clk6502_program_init(PIO pio, uint sm, uint offset) {
  // Connect all relevant GPIO pins to the statemachine.
  const uint pins[] = {
    // D0-D7, A0-A7, A8-A15:
    0, 1, 2, 3, 4, 5, 6, 7,
    // /OE1 + /OE2 + /OE3:
    8, 9, 10,
    // R/W:
    11,
    // PHI2:
    21
  };
  for (uint i = 0; i < count_of(pins); i++) {
    pio_gpio_init(pio, pins[i]);
  }

  // /OE1 to /OE3 are always outputs.
  pio_sm_set_consecutive_pindirs(pio, sm, 8, 3, true);
  // R/W is always an input.
  pio_sm_set_consecutive_pindirs(pio, sm, 11, 1, false);
  // PHI2 is always an output.
  pio_sm_set_consecutive_pindirs(pio, sm, 21, 1, true);

  pio_sm_config c = clk6502_program_get_default_config(offset);

  // GPIO0-7 (D0-D7, A0-A15) are bidrectional pins.
  sm_config_set_in_pins(&c, 0);
  sm_config_set_out_pins(&c, 0, 8);

  // GPIO8-10 are set pins (/OE1 to /OE3).
  sm_config_set_set_pins(&c, 8, 3);

  // GPIO11 (R/W) is used to JMP on.
  sm_config_set_jmp_pin(&c, 11);

  // GPIO21 (PHI2) is the sideset pin.
  sm_config_set_sideset_pins(&c, 21);

  // Auto-push A0-A15 + D0-D7 + R/W to the RX FIFO, shifting left.
  sm_config_set_in_shift(&c, false, true, 16 + 8 + 1);

  // Manual pull D0-D7 from the TX FIFO, shifting left.
  sm_config_set_out_shift(&c, false, false, 8);
  
  // Need to run the statemachine at 100 MHz.
  const float div = clock_get_hz(clk_sys) / 100000000;
  sm_config_set_clkdiv(&c, div);


  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, true);
}

%}
